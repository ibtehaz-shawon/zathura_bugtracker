from django.http import JsonResponse
from rest_framework import status
from rest_framework.views import APIView

from bugtracker.models import Invitation
from bugtracker.model_managers.serializer import InvitationSerializer
from bugtracker.utility import authorization_token_check, unauthorized_access, token_invalid, get_token_object_by_token, \
    invalid_user, error_occurred


class UserCreation(APIView):

    def post(self, request):
        data = request.data
        token_obj = authorization_token_check(data)
        if type(token_obj) == JsonResponse:
            return token_obj

        user_obj = token_obj.authorized_user

        if not user_obj.is_admin:
            return JsonResponse(unauthorized_access)

        if "user_email" not in data:
            return JsonResponse({
                "message": "Missing mandatory parameters! user_email is required",
                "status": status.HTTP_401_UNAUTHORIZED
            })

        payload = {
            "user_email": data["user_email"],
            "invited_by": user_obj.pk
        }

        invitation_serializer = InvitationSerializer(data=payload)

        if invitation_serializer.is_valid():
            invitation_obj = invitation_serializer.save()

            return JsonResponse({
                "message": "{} has been invited.".format(invitation_obj.user_email),
                "status": status.HTTP_201_CREATED,
            })
        else:
            # Validation Error
            return JsonResponse({
                "message": "Validation Error. {}".format(invitation_serializer.errors),
                "status": status.HTTP_406_NOT_ACCEPTABLE
            })

    def get(self, request):
        token = request.GET.get('token', None)
        if token is None:
            return JsonResponse(token_invalid)

        token_obj = get_token_object_by_token(token)
        if token_obj is None:
            return JsonResponse(invalid_user)

        # send all tokens generated by the users organization
        # if user is an admin, send all tokens.

        user_obj = token_obj.authorized_user

        if user_obj.is_admin:
            payload = list()
            all_invitations = Invitation.objects.all()

            for invitations in all_invitations:
                payload.append({
                    "user_email": invitations.user_email,
                    "invited_by": invitations.invited_by.user_email,
                    "invited_at": invitations.invited_at,
                    "is_used": invitations.is_used
                })

            return JsonResponse({
                "invitations": payload,
                "status": status.HTTP_200_OK
            })
        else:
            return JsonResponse(unauthorized_access)

    def delete(self, request, user_email):
        data = request.data
        token_obj = authorization_token_check(data)
        if type(token_obj) == JsonResponse:
            return token_obj

        user_obj = token_obj.authorized_user

        if not user_obj.is_admin:
            return JsonResponse(unauthorized_access)

        invitation_obj = Invitation.objects.get(user_email=user_email)

        if invitation_obj is None:
            return JsonResponse({
                "message": "{} does not exist".format(user_email),
                "status": status.HTTP_400_BAD_REQUEST
            })
        else:
            invitation_obj.delete()

            if Invitation.objects.filter(user_email=user_email).count() != 0:
                return JsonResponse(error_occurred)
            else:
                return JsonResponse({
                    "message": "Invitation for {} has been deleted".format(user_email),
                    "status": status.HTTP_202_ACCEPTED
                })
